/*
Deployment script for dbPersons

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "dbPersons"
:setvar DefaultFilePrefix "dbPersons"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL13.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL13.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367)) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Creating [dbo].[__MigrationHistory]...';


GO
CREATE TABLE [dbo].[__MigrationHistory] (
    [MigrationId]    NVARCHAR (150)  NOT NULL,
    [ContextKey]     NVARCHAR (300)  NOT NULL,
    [Model]          VARBINARY (MAX) NOT NULL,
    [ProductVersion] NVARCHAR (32)   NOT NULL,
    CONSTRAINT [PK_dbo.__MigrationHistory] PRIMARY KEY CLUSTERED ([MigrationId] ASC, [ContextKey] ASC)
);


GO
PRINT N'Creating [dbo].[DisplayProfileModels]...';


GO
CREATE TABLE [dbo].[DisplayProfileModels] (
    [Id]            BIGINT         IDENTITY (1, 1) NOT NULL,
    [FirstName]     NVARCHAR (MAX) NULL,
    [LastName]      NVARCHAR (MAX) NULL,
    [Patronymic]    NVARCHAR (MAX) NULL,
    [PhoneNumber]   NVARCHAR (MAX) NULL,
    [Discriminator] NVARCHAR (128) NOT NULL,
    CONSTRAINT [PK_dbo.DisplayProfileModels] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[FirstName]...';


GO
CREATE TABLE [dbo].[FirstName] (
    [Id]   BIGINT        IDENTITY (1, 1) NOT NULL,
    [Name] NVARCHAR (32) NOT NULL,
    CONSTRAINT [PK_FirstName] PRIMARY KEY CLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [dbo].[FirstName].[U_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [U_Id]
    ON [dbo].[FirstName]([Id] ASC);


GO
PRINT N'Creating [dbo].[LastName]...';


GO
CREATE TABLE [dbo].[LastName] (
    [Id]   BIGINT        IDENTITY (1, 1) NOT NULL,
    [Name] NVARCHAR (32) NOT NULL,
    CONSTRAINT [PK_LastName] PRIMARY KEY CLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [dbo].[LastName].[U_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [U_Id]
    ON [dbo].[LastName]([Id] ASC);


GO
PRINT N'Creating [dbo].[Patronymic]...';


GO
CREATE TABLE [dbo].[Patronymic] (
    [Id]   BIGINT        IDENTITY (1, 1) NOT NULL,
    [Name] NVARCHAR (32) NOT NULL,
    CONSTRAINT [PK_Patronymic] PRIMARY KEY CLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [dbo].[Patronymic].[U_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [U_Id]
    ON [dbo].[Patronymic]([Id] ASC);


GO
PRINT N'Creating [dbo].[PhoneNumber]...';


GO
CREATE TABLE [dbo].[PhoneNumber] (
    [Id]     BIGINT        IDENTITY (1, 1) NOT NULL,
    [Number] NVARCHAR (32) NOT NULL,
    CONSTRAINT [PK_PhoneNumber] PRIMARY KEY CLUSTERED ([Number] ASC)
);


GO
PRINT N'Creating [dbo].[PhoneNumber].[U_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [U_Id]
    ON [dbo].[PhoneNumber]([Id] ASC);


GO
PRINT N'Creating [dbo].[Profile]...';


GO
CREATE TABLE [dbo].[Profile] (
    [Id]            BIGINT IDENTITY (1, 1) NOT NULL,
    [FirstNameId]   BIGINT NOT NULL,
    [LastNameId]    BIGINT NOT NULL,
    [PatronymicId]  BIGINT NULL,
    [PhoneNumberId] BIGINT NULL,
    CONSTRAINT [PK_Profile] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[FK_Profile_FirstNameId]...';


GO
ALTER TABLE [dbo].[Profile] WITH NOCHECK
    ADD CONSTRAINT [FK_Profile_FirstNameId] FOREIGN KEY ([FirstNameId]) REFERENCES [dbo].[FirstName] ([Id]) ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Profile_LastNameId]...';


GO
ALTER TABLE [dbo].[Profile] WITH NOCHECK
    ADD CONSTRAINT [FK_Profile_LastNameId] FOREIGN KEY ([LastNameId]) REFERENCES [dbo].[LastName] ([Id]) ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Profile_PatronymicId]...';


GO
ALTER TABLE [dbo].[Profile] WITH NOCHECK
    ADD CONSTRAINT [FK_Profile_PatronymicId] FOREIGN KEY ([PatronymicId]) REFERENCES [dbo].[Patronymic] ([Id]) ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Profile_PhoneNumberId]...';


GO
ALTER TABLE [dbo].[Profile] WITH NOCHECK
    ADD CONSTRAINT [FK_Profile_PhoneNumberId] FOREIGN KEY ([PhoneNumberId]) REFERENCES [dbo].[PhoneNumber] ([Id]) ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[AddFirstName]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[AddFirstName]
	@FirstName NVARCHAR(32)
AS
BEGIN
	IF NOT EXISTS (SELECT * FROM FirstName WHERE Name = @FirstName)
	BEGIN
		INSERT INTO FirstName (Name)
		VALUES (@FirstName);	
	END;
END;
GO
PRINT N'Creating [dbo].[AddLastName]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[AddLastName]
	@LastName NVARCHAR(32)
AS
BEGIN
	IF NOT EXISTS (SELECT * FROM LastName WHERE Name = @LastName)
	BEGIN
		INSERT INTO LastName (Name)
		VALUES (@LastName);	
	END;
END;
GO
PRINT N'Creating [dbo].[AddPatronymic]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[AddPatronymic]
	@Patronymic NVARCHAR(32)
AS
BEGIN
	IF NOT EXISTS (SELECT * FROM Patronymic WHERE Name = @Patronymic)
	BEGIN
		INSERT INTO Patronymic (Name)
		VALUES (@Patronymic);
	END;
END;
GO
PRINT N'Creating [dbo].[AddPhoneNumber]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[AddPhoneNumber]
	@PhoneNumber NVARCHAR(32)
AS
BEGIN
	IF NOT EXISTS (SELECT * FROM PhoneNumber WHERE Number = @PhoneNumber)
	BEGIN
		INSERT INTO PhoneNumber (Number)
		VALUES (@PhoneNumber);
	END;
END;
GO
PRINT N'Creating [dbo].[AddProfile]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[AddProfile]
	@FirstName NVARCHAR(32),
	@LastName NVARCHAR(32),
	@Patronymic NVARCHAR(32) = NULL,
	@PhoneNumber NVARCHAR(32) = NULL,
	@ResultProfileId BIGINT OUTPUT
AS
BEGIN
	DECLARE @FirstNameId BIGINT;
	DECLARE @LastNameId BIGINT;
	DECLARE @PatronymicId BIGINT;
	DECLARE @PhoneNumberId BIGINT;

	EXEC dbo.AddFirstName @FirstName = @FirstName;
	SELECT @FirstNameId = Id FROM FirstName WHERE Name = @FirstName;

	EXEC dbo.AddLastName @LastName = @LastName;
	SELECT @LastNameId = Id FROM LastName WHERE Name = @LastName;

	IF (@Patronymic <> '' AND @Patronymic IS NOT NULL)
	BEGIN
		EXEC dbo.AddPatronymic @Patronymic = @Patronymic;
		SELECT @PatronymicId = Id FROM Patronymic WHERE Name = @Patronymic;
	END
	IF (@PhoneNumber <> '' AND @PhoneNumber IS NOT NULL)
	BEGIN
		EXEC dbo.AddPhoneNumber @PhoneNumber = @PhoneNumber;
		SELECT @PhoneNumberId = Id FROM PhoneNumber WHERE Number = @PhoneNumber;
	END
	
	IF NOT EXISTS (SELECT * FROM Profile 
	WHERE 
	FirstNameId = @FirstNameId AND
	LastNameId = @LastNameId AND
	PatronymicId = @PatronymicId AND
	PhoneNumberId = @PhoneNumberId
	)
	BEGIN
		INSERT INTO Profile (FirstNameId, LastNameId, PatronymicId, PhoneNumberId)
		VALUES (@FirstNameId, @LastNameId, @PatronymicId, @PhoneNumberId);
		SET @ResultProfileId = IDENT_CURRENT('Profile');
	END
	ELSE
	BEGIN
		SELECT @ResultProfileId = Id FROM Profile 
		WHERE 
		FirstNameId = @FirstNameId AND
		LastNameId = @LastNameId AND
		PatronymicId = @PatronymicId AND
		PhoneNumberId = @PhoneNumberId
	END
END;
GO
PRINT N'Creating [dbo].[DeleteProfile]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[DeleteProfile]
	@ProfileId BIGINT
AS
BEGIN
	DELETE FROM Profile WHERE Id = @ProfileId;
END;
GO
PRINT N'Creating [dbo].[GetProfile]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[GetProfile]
	@ProfileId BIGINT
AS
BEGIN
	SELECT SelectedProfile.Id, FirstName.Name AS FirstName, LastName.Name AS LastName, Patronymic.Name AS Patronymic, PhoneNumber.Number AS PhoneNumber
	FROM (SELECT * FROM Profile WHERE Id = @ProfileId) AS SelectedProfile
	LEFT JOIN FirstName ON SelectedProfile.FirstNameId = FirstName.Id
	LEFT JOIN LastName ON SelectedProfile.LastNameId = LastName.Id
	LEFT JOIN Patronymic ON SelectedProfile.PatronymicId = Patronymic.Id
	LEFT JOIN PhoneNumber ON SelectedProfile.PhoneNumberId = PhoneNumber.Id;
END;
GO
PRINT N'Creating [dbo].[GetProfiles]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[GetProfiles]
AS
BEGIN
	SELECT Profile.Id, FirstName.Name AS FirstName, LastName.Name AS LastName, Patronymic.Name AS Patronymic, PhoneNumber.Number AS PhoneNumber
	FROM Profile
	LEFT JOIN FirstName ON Profile.FirstNameId = FirstName.Id
	LEFT JOIN LastName ON Profile.LastNameId = LastName.Id
	LEFT JOIN Patronymic ON Profile.PatronymicId = Patronymic.Id
	LEFT JOIN PhoneNumber ON Profile.PhoneNumberId = PhoneNumber.Id
	ORDER BY Profile.Id DESC;
END;
GO
PRINT N'Creating [dbo].[UpdateProfile]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[UpdateProfile]
	@ProfileId BIGINT,
	@FirstName NVARCHAR(32),
	@LastName NVARCHAR(32),
	@Patronymic NVARCHAR(32) = NULL,
	@PhoneNumber NVARCHAR(32) = NULL,
	@Result BIT OUTPUT
AS
BEGIN
	IF NOT EXISTS (SELECT * FROM Profile 
	WHERE 
	Id = @ProfileId
	)
	BEGIN
		SET @Result = 0;
	END

	DECLARE @FirstNameId BIGINT;
	DECLARE @LastNameId BIGINT;
	DECLARE @PatronymicId BIGINT;
	DECLARE @PhoneNumberId BIGINT;

	EXEC dbo.AddFirstName @FirstName = @FirstName;
	SELECT @FirstNameId = Id FROM FirstName WHERE Name = @FirstName;

	EXEC dbo.AddLastName @LastName = @LastName;
	SELECT @LastNameId = Id FROM LastName WHERE Name = @LastName;

	IF (@Patronymic <> '' AND @Patronymic IS NOT NULL)
	BEGIN
		EXEC dbo.AddPatronymic @Patronymic = @Patronymic;
		SELECT @PatronymicId = Id FROM Patronymic WHERE Name = @Patronymic;
	END
	IF (@PhoneNumber <> '' AND @PhoneNumber IS NOT NULL)
	BEGIN
		EXEC dbo.AddPhoneNumber @PhoneNumber = @PhoneNumber;
		SELECT @PhoneNumberId = Id FROM PhoneNumber WHERE Number = @PhoneNumber;
	END
	
	UPDATE Profile SET FirstNameId = @FirstNameId, LastNameId = @LastNameId, PatronymicId = @PatronymicId, PhoneNumberId = @PhoneNumberId
	WHERE Id = @ProfileId;

	SET @Result = 1;
END;
GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Profile] WITH CHECK CHECK CONSTRAINT [FK_Profile_FirstNameId];

ALTER TABLE [dbo].[Profile] WITH CHECK CHECK CONSTRAINT [FK_Profile_LastNameId];

ALTER TABLE [dbo].[Profile] WITH CHECK CHECK CONSTRAINT [FK_Profile_PatronymicId];

ALTER TABLE [dbo].[Profile] WITH CHECK CHECK CONSTRAINT [FK_Profile_PhoneNumberId];


GO
PRINT N'Update complete.';


GO
